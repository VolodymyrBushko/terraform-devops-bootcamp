Terraform will perform the following actions:

  # aws_instance.amazon will be created
  + resource "aws_instance" "amazon" {
      + ami                                  = "ami-0592c673f0b1e7665"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "amazon"
        }
      + tags_all                             = {
          + "Name" = "amazon"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_instance.ubuntu will be created
  + resource "aws_instance" "ubuntu" {
      + ami                                  = "ami-0084a47cc718c111a"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "ubuntu"
        }
      + tags_all                             = {
          + "Name" = "ubuntu"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "fda3d78c08e864e8f88eee9ce75561af3df08155"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = true
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_security_group.amazon_sg will be created
  + resource "aws_security_group" "amazon_sg" {
      + arn                    = (known after apply)
      + description            = "Allows ICMP (Echo), SSH, HTTP, and HTTPS traffic within the private network"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "amazon_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-047e159938efbef87"
    }

  # aws_security_group.ubuntu_sg will be created
  + resource "aws_security_group" "ubuntu_sg" {
      + arn                    = (known after apply)
      + description            = "Allows ICMP (Echo), SSH, HTTP, and HTTPS traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "ubuntu_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-047e159938efbef87"
    }

  # aws_security_group_rule.amazon_sg_egress_rule will be created
  + resource "aws_security_group_rule" "amazon_sg_egress_rule" {
      + cidr_blocks              = [
          + "172.31.0.0/16",
        ]
      + description              = "Allows all egress traffic within the private network"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # aws_security_group_rule.amazon_sg_icmp_echo_ingress_rule will be created
  + resource "aws_security_group_rule" "amazon_sg_icmp_echo_ingress_rule" {
      + cidr_blocks              = [
          + "172.31.0.0/16",
        ]
      + description              = "Allows ingress ICMP (Echo) traffic within the private network on port 8"
      + from_port                = 8
      + id                       = (known after apply)
      + protocol                 = "icmp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "ingress"
    }

  # aws_security_group_rule.amazon_sg_tcp_http_ingress_rule will be created
  + resource "aws_security_group_rule" "amazon_sg_tcp_http_ingress_rule" {
      + cidr_blocks              = [
          + "172.31.0.0/16",
        ]
      + description              = "Allows ingress TCP (HTTP) traffic within the private network on port 80"
      + from_port                = 80
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # aws_security_group_rule.amazon_sg_tcp_https_ingress_rule will be created
  + resource "aws_security_group_rule" "amazon_sg_tcp_https_ingress_rule" {
      + cidr_blocks              = [
          + "172.31.0.0/16",
        ]
      + description              = "Allows ingress TCP (HTTPS) traffic within the private network on port 443"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # aws_security_group_rule.amazon_sg_tcp_ssh_ingress_rule will be created
  + resource "aws_security_group_rule" "amazon_sg_tcp_ssh_ingress_rule" {
      + cidr_blocks              = [
          + "172.31.0.0/16",
        ]
      + description              = "Allows ingress TCP (SSH) traffic within the private network on port 22"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # aws_security_group_rule.ubuntu_sg_egress_rule will be created
  + resource "aws_security_group_rule" "ubuntu_sg_egress_rule" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allows all egress traffic"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # aws_security_group_rule.ubuntu_sg_icmp_echo_ingress_rule will be created
  + resource "aws_security_group_rule" "ubuntu_sg_icmp_echo_ingress_rule" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allows ingress ICMP (Echo) traffic on port 8"
      + from_port                = 8
      + id                       = (known after apply)
      + protocol                 = "icmp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "ingress"
    }

  # aws_security_group_rule.ubuntu_sg_tcp_http_ingress_rule will be created
  + resource "aws_security_group_rule" "ubuntu_sg_tcp_http_ingress_rule" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allows ingress TCP (HTTP) traffic on port 80"
      + from_port                = 80
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # aws_security_group_rule.ubuntu_sg_tcp_https_ingress_rule will be created
  + resource "aws_security_group_rule" "ubuntu_sg_tcp_https_ingress_rule" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allows ingress TCP (HTTPS) traffic on port 443"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # aws_security_group_rule.ubuntu_sg_tcp_ssh_ingress_rule will be created
  + resource "aws_security_group_rule" "ubuntu_sg_tcp_ssh_ingress_rule" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allows ingress TCP (SSH) traffic on port 22"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # aws_subnet.private_subnet will be created
  + resource "aws_subnet" "private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-central-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.31.48.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private_subnet"
        }
      + tags_all                                       = {
          + "Name" = "private_subnet"
        }
      + vpc_id                                         = "vpc-047e159938efbef87"
    }

Plan: 15 to add, 0 to change, 0 to destroy.